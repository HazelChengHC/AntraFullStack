
Generics have several benefits:

Reusability: Generic classes and methods can be reused with different types, reducing the need for redundant code.

Type safety: Generics ensure type safety at compile-time by catching type errors before the code is executed.

Performance: Generics improve performance by eliminating the need for boxing and unboxing, which can be expensive operations.


using System.Collections.Generic;

List stringList = new List();


The Dictionary class, which is a collection type that represents a collection of key/value pairs, has two generic type parameters: TKey and TValue.


The commonly used methods to add items to lists are:Add(item): Adds an item to the end of the list. Insert(index, item): Inserts an item at a specified index in the list.



// Generics Q1

using System;
using System.Collections.Generic;

public class MyStack<T>
{
    private List<T> stack;

    public MyStack()
    {
        stack = new List<T>();
    }

    public int Count
    {
        get { return stack.Count; }
    }

    public T Pop()
    {
        if (Count == 0)
            throw new InvalidOperationException("Stack is empty");

        T item = stack[Count - 1];
        stack.RemoveAt(Count - 1);
        return item;
    }

    public void Push(T item)
    {
        stack.Add(item);
    }
}


// Generics Q2
using System;

public class MyList<T>
{
    private T[] items;
    private int count;

    public MyList()
    {
        items = new T[4];
        count = 0;
    }

    public void Add(T element)
    {
        if (count == items.Length)
        {
            T[] temp = new T[2 * items.Length];
            for (int i = 0; i < count; i++)
            {
                temp[i] = items[i];
            }
            items = temp;
        }
        items[count] = element;
        count++;
    }
}
